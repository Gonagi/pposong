version: '3'
services:
  nginx:
    image: gonaging/nginx:1.25
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - type: bind
        source: Docker/Keys
        target: /etc/Keys
      - type: bind
        source: Docker/nginx/conf.d
        target: /etc/nginx/conf.d
      - type: bind
        source: Docker/nginx/nginx.conf
        target: /etc/nginx/nginx.conf
    networks:
      - front-network
    environment:
      - TZ=Asia/Seoul
    depends_on:
      - server
      - api_gateway
      - mysql

  server:
    image: gonaging/server:latest
    depends_on:
      - mysql
    expose:
      - 8888
    build: ./Docker/server
    container_name: server
    restart: unless-stopped
    stdin_open: true # `-i`
    tty: true # `-t`
    environment:
      - TZ=Asia/Seoul
    networks:
      - front-network
      - back-network
    volumes:
      - type: bind
        source: Docker/server
        target: /usr/src/app/server
      - type: bind
        source: Docker/Keys
        target: /usr/src/app/server/Keys

  api_gateway:
    image: gonaging/api_gateway:latest
    depends_on:
      - mysql
    expose:
      - 8889
    build: ./Docker/api_gateway
    container_name: api_gateway
    restart: unless-stopped
    stdin_open: true # `-i`
    tty: true # `-t`
    environment:
      - TZ=Asia/Seoul
    networks:
      - front-network
      - back-network
    volumes:
      - type: bind
        source: Docker/api_gateway
        target: /usr/src/app/api_gateway
      - type: bind
        source: Docker/Keys
        target: /usr/src/app/api_gateway/Keys

  mysql:
    image: gonaging/mysql:8
    restart: unless-stopped
    env_file:
      - Docker/Keys/.env
    container_name: mysqlDB
    expose:
      - 3306
    environment:
      - TZ=Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - type: volume
        source: db
        target: /var/lib/mysql
      - type: bind
        source: Docker/mysql
        target: /docker-entrypoint-initdb.d
    networks:
      - back-network
    healthcheck:
      test: ['CMD-SHELL', 'mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD']
      interval: 5s
      timeout: 2s
      retries: 100
volumes:
   db:
networks:
  front-network:
    driver: bridge
  back-network:
    driver: bridge

